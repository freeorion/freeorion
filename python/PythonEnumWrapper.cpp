#include "../universe/Enums.h"
#include "../Empire/Diplomacy.h"

#include <boost/python.hpp>

namespace FreeOrionPython {
    using boost::python::enum_;
    void WrapGameStateEnums() {
        enum_<StarType>("starType")
            .value("blue",      STAR_BLUE)
            .value("white",     STAR_WHITE)
            .value("yellow",    STAR_YELLOW)
            .value("orange",    STAR_ORANGE)
            .value("red",       STAR_RED)
            .value("neutron",   STAR_NEUTRON)
            .value("blackHole", STAR_BLACK)
            .value("noStar",    STAR_NONE)
            .value("unknown",   INVALID_STAR_TYPE)
        ;
        enum_<Visibility>("visibility")
            .value("invalid",   INVALID_VISIBILITY)
            .value("none",      VIS_NO_VISIBILITY)
            .value("basic",     VIS_BASIC_VISIBILITY)
            .value("partial",   VIS_PARTIAL_VISIBILITY)
            .value("full",      VIS_FULL_VISIBILITY)
        ;
        enum_<PlanetSize>("planetSize")
            .value("tiny",      SZ_TINY)
            .value("small",     SZ_SMALL)
            .value("medium",    SZ_MEDIUM)
            .value("large",     SZ_LARGE)
            .value("huge",      SZ_HUGE)
            .value("asteroids", SZ_ASTEROIDS)
            .value("gasGiant",  SZ_GASGIANT)
            .value("noWorld",   SZ_NOWORLD)
            .value("unknown",   INVALID_PLANET_SIZE)
        ;
        enum_<PlanetType>("planetType")
            .value("swamp",     PT_SWAMP)
            .value("radiated",  PT_RADIATED)
            .value("toxic",     PT_TOXIC)
            .value("inferno",   PT_INFERNO)
            .value("barren",    PT_BARREN)
            .value("tundra",    PT_TUNDRA)
            .value("desert",    PT_DESERT)
            .value("terran",    PT_TERRAN)
            .value("ocean",     PT_OCEAN)
            .value("asteroids", PT_ASTEROIDS)
            .value("gasGiant",  PT_GASGIANT)
            .value("unknown",   INVALID_PLANET_TYPE)
        ;
        enum_<PlanetEnvironment>("planetEnvironment")
            .value("uninhabitable", PE_UNINHABITABLE)
            .value("hostile",       PE_HOSTILE)
            .value("poor",          PE_POOR)
            .value("adequate",      PE_ADEQUATE)
            .value("good",          PE_GOOD)
        ;
        enum_<TechType>("techType")
            .value("theory",        TT_THEORY)
            .value("application",   TT_APPLICATION)
            .value("refinement",    TT_REFINEMENT)
        ;
        enum_<TechStatus>("techStatus")
            .value("unresearchable",    TS_UNRESEARCHABLE)
            .value("researchable",      TS_RESEARCHABLE)
            .value("complete",          TS_COMPLETE)
        ;
        enum_<BuildType>("buildType")
            .value("building",          BT_BUILDING)
            .value("ship",              BT_SHIP)
        ;
        enum_<ResourceType>("resourceType")
            .value("industry",      RE_INDUSTRY)
            .value("trade",         RE_TRADE)
            .value("research",      RE_RESEARCH)
        ;
        enum_<MeterType>("meterType")
            .value("targetPopulation",  METER_TARGET_POPULATION)
            .value("targetIndustry",    METER_TARGET_INDUSTRY)
            .value("targetResearch",    METER_TARGET_RESEARCH)
            .value("targetTrade",       METER_TARGET_TRADE)
            .value("targetConstruction",METER_TARGET_CONSTRUCTION)

            .value("maxFuel",           METER_MAX_FUEL)
            .value("maxShield",         METER_MAX_SHIELD)
            .value("maxStructure",      METER_MAX_STRUCTURE)
            .value("maxDefense",        METER_MAX_DEFENSE)
            .value("maxTroops",         METER_MAX_TROOPS)
            .value("maxSupply",         METER_MAX_SUPPLY)

            .value("population",        METER_POPULATION)
            .value("industry",          METER_INDUSTRY)
            .value("research",          METER_RESEARCH)
            .value("trade",             METER_TRADE)
            .value("construction",      METER_CONSTRUCTION)

            .value("fuel",              METER_FUEL)
            .value("shield",            METER_SHIELD)
            .value("structure",         METER_STRUCTURE)
            .value("defense",           METER_DEFENSE)
            .value("troops",            METER_TROOPS)
            .value("supply",            METER_SUPPLY)

            .value("rebels",            METER_REBEL_TROOPS)
            .value("size",              METER_SIZE)
            .value("stealth",           METER_STEALTH)
            .value("detection",         METER_DETECTION)
            .value("battleSpeed",       METER_SPEED)
            .value("starlaneSpeed",     METER_SPEED)

            .value("damage",            METER_DAMAGE)
            .value("speed",             METER_SPEED)
            .value("capacity",          METER_CAPACITY)
        ;
        enum_<DiplomaticStatus>("diplomaticStatus")
            .value("war",               DIPLO_WAR)
            .value("peace",             DIPLO_PEACE)
        ;
        enum_<DiplomaticMessage::DiplomaticMessageType>("diplomaticMessageType")
            .value("noMessage",         DiplomaticMessage::INVALID_DIPLOMATIC_MESSAGE_TYPE)
            .value("warDeclaration",    DiplomaticMessage::WAR_DECLARATION)
            .value("peaceProposal",     DiplomaticMessage::PEACE_PROPOSAL)
            .value("acceptProposal",    DiplomaticMessage::ACCEPT_PROPOSAL)
            .value("cancelProposal",    DiplomaticMessage::CANCEL_PROPOSAL)
        ;
        enum_<CaptureResult>("captureResult")
            .value("capture",       CR_CAPTURE)
            .value("destroy",       CR_DESTROY)
            .value("retain",        CR_RETAIN)
        ;
        enum_<ShipSlotType>("shipSlotType")
            .value("external",      SL_EXTERNAL)
            .value("internal",      SL_INTERNAL)
            .value("core",          SL_CORE)
        ;
        enum_<ShipPartClass>("shipPartClass")
            .value("shortRange",        PC_SHORT_RANGE)
            .value("missiles",          PC_MISSILES)
            .value("fighters",          PC_FIGHTERS)
            .value("pointDefense",      PC_POINT_DEFENSE)
            .value("shields",           PC_SHIELD)
            .value("armour",            PC_ARMOUR)
            .value("troops",            PC_TROOPS)
            .value("detection",         PC_DETECTION)
            .value("stealth",           PC_STEALTH)
            .value("fuel",              PC_FUEL)
            .value("colony",            PC_COLONY)
            .value("starlaneSpeed",     PC_SPEED)
            .value("general",           PC_GENERAL)
            .value("bombard",           PC_BOMBARD)
            .value("research",          PC_RESEARCH)
            .value("industry",          PC_INDUSTRY)
            .value("trade",             PC_TRADE)
            .value("productionLocation",PC_PRODICTION_LOCATION)
        ;
        enum_<UnlockableItemType>("unlockableItemType")
            .value("invalid",       INVALID_UNLOCKABLE_ITEM_TYPE)
            .value("building",      UIT_BUILDING)
            .value("shipPart",      UIT_SHIP_PART)
            .value("shipHull",      UIT_SHIP_HULL)
            .value("shipDesign",    UIT_SHIP_DESIGN)
            .value("tech",          UIT_TECH)
        ;
        enum_<Aggression>("aggression")
            .value("invalid",       INVALID_AGGRESSION)
            .value("beginner",      BEGINNER)
            .value("turtle",        TURTLE)
            .value("cautious",      CAUTIOUS)
            .value("typical",       TYPICAL)
            .value("aggressive",    AGGRESSIVE)
            .value("maniacal",      MANIACAL)
        ;
        enum_<GalaxySetupOption>("galaxySetupOption")
            .value("invalid",       INVALID_GALAXY_SETUP_OPTION)
            .value("none",          GALAXY_SETUP_NONE)
            .value("low",           GALAXY_SETUP_LOW)
            .value("medium",        GALAXY_SETUP_MEDIUM)
            .value("high",          GALAXY_SETUP_HIGH)
        ;
        enum_<Shape>("galaxyShape")
            .value("invalid",       INVALID_SHAPE)
            .value("spiral2",       SPIRAL_2)
            .value("spiral3",       SPIRAL_3)
            .value("spiral4",       SPIRAL_4)
            .value("cluster",       CLUSTER)
            .value("elliptical",    ELLIPTICAL)
            .value("irregular1",    IRREGULAR1)
            .value("irregular2",    IRREGULAR2)
            .value("ring",          RING)
            .value("random",        RANDOM)
        ;
    }
}
