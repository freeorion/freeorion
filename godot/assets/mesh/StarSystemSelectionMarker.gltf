extends Spatial

# Assume you have multiple star nodes or fleets that can be clicked.
# We'll show how to detect a clicked star and center the camera.

var camera_node: Camera

func _ready():
    camera_node = $MainCamera  # reference the camera child
    # Optionally, set an initial camera position
    camera_node.translation = Vector3(0, 5, -10)
    camera_node.look_at(Vector3.ZERO, Vector3.UP)

func _input(event):
    # Check if left mouse button is clicked
    if event is InputEventMouseButton and event.pressed and event.button_index == BUTTON_LEFT:
        var from = camera_node.project_ray_origin(event.position)
        var to = from + camera_node.project_ray_normal(event.position) * 1000.0

        # Cast a ray from camera to mouse position to see if it hits a "star" or "fleet"
        var space_state = get_world().direct_space_state
        var result = space_state.intersect_ray(from, to, [], collide_with_areas=true, collide_with_bodies=true)

        if result:
            if result.collider and result.collider.name.begins_with("Star"):
                focus_camera_on_object(result.collider)
            elif result.collider and result.collider.name.begins_with("Fleet"):
                focus_camera_on_object(result.collider)

func focus_camera_on_object(obj: Node):
    # Suppose the object is a Spatial for star/fleet
    var target_pos = obj.global_transform.origin
    # move camera to offset behind it, for instance
    # you might want some fixed offset (like behind or above)
    var new_cam_pos = target_pos + Vector3(0, 5, -10)

    # Option 1: Instantly move camera
    camera_node.translation = new_cam_pos
    camera_node.look_at(target_pos, Vector3.UP)

    # Option 2: Tween approach
    # var tween = create_tween()
    # tween.interpolate_property(camera_node, "translation", camera_node.translation, new_cam_pos, 1.0)
    # tween.interpolate_callback(self, 1.0, "_look_at_target", target_pos)
    # tween.start()

func _look_at_target(target_pos: Vector3):
    camera_node.look_at(target_pos, Vector3.UP)
