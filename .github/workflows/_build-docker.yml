name: "Dockerized Linux"

on:
  workflow_call:
jobs:
  docker:
    timeout-minutes: 55
    name: ${{ matrix.image }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - ubuntu-23.04
          - fedora-33
          - debian-oldstable
          - debian-stable
          - debian-sid
          - debian-sid-i386
          - manjaro
          - fedora-rawhide
          - void-musl
    env:
      CACHE_NAME: linux
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="freeorion/freeorion"
          echo tagged_image=${IMAGE}:${TAG} >> $GITHUB_OUTPUT
          echo tag=${TAG} >> $GITHUB_OUTPUT
      - uses: jpribyl/action-docker-layer-caching@v0.1.1
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-layer-cache-${{ matrix.image }}-{hash}
          restore-keys: |
            docker-layer-cache-${{ matrix.image }}-
            layer-docker-layer-cache-${{ matrix.image }}
      - name: Build production image
        run: |
          docker build .github/docker/${{ matrix.image }}/ --file .github/docker/${{ matrix.image }}/Dockerfile --tag ${{ steps.prep.outputs.tagged_image }}
      - name: Prepare ccache timestamp
        id: build-docker-ccache-timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          file(APPEND "$ENV{GITHUB_OUTPUT}" "timestamp=${current_date}")
      - name: Cache files with ccache
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/ccache
          key: build-${{ matrix.image }}-docker-ccache-${{ steps.build-docker-ccache-timestamp.outputs.timestamp }}
          restore-keys: |
            build-${{ matrix.image }}-docker-ccache-
      - name: Detect godot
        if: ${{ matrix.image != 'manjaro' && matrix.image != 'void-musl' }}
        id: detect-godot
        run: |
          touch ${GITHUB_OUTPUT}
          docker run -v "$(pwd):/freeorion" -v "${{ runner.temp }}/ccache:/ccache_dir" --mount type=bind,source=${GITHUB_OUTPUT},target=/github-output.file -e CCACHE_DIR='/ccache_dir' -e GITHUB_OUTPUT=/github-output.file -w /freeorion ${{ steps.prep.outputs.tagged_image }} /usr/bin/cmake -P /freeorion/.github/godot-detect.cmake
      - name: Copy godot
        if: ${{ matrix.image != 'manjaro' && matrix.image != 'void-musl' }}
        run: |
          mkdir build
          docker run -v "$(pwd):/freeorion" -v "${{ runner.temp }}/ccache:/ccache_dir" -e CCACHE_DIR='/ccache_dir' -w /freeorion/build ${{ steps.prep.outputs.tagged_image }} cp ${{ steps.detect-godot.outputs.godot }} /freeorion/build/godot
      - name: Generate godot API file
        if: ${{ matrix.image != 'manjaro' && matrix.image != 'void-musl' }}
        run: |
          docker run -v "$(pwd):/freeorion" -v "${{ runner.temp }}/ccache:/ccache_dir" -e CCACHE_DIR='/ccache_dir' -w /freeorion/build ${{ steps.prep.outputs.tagged_image }} /freeorion/build/godot --gdnative-generate-json-api /freeorion/build/godot-api.json
      - name: Configure freeorion
        if: ${{ matrix.image == 'ubuntu-23.04' }}
        run: |
          docker run -v "$(pwd):/freeorion" -v "${{ runner.temp }}/ccache:/ccache_dir" -e CCACHE_DIR='/ccache_dir' -w /freeorion/build ${{ steps.prep.outputs.tagged_image }} /usr/bin/cmake -DBUILD_CLIENT_GODOT=ON -DGODOT_CUSTOM_API_FILE=/freeorion/build/godot-api.json -DBUILD_TESTING=ON -DCMAKE_C_COMPILER=gcc-12 -DCMAKE_CXX_COMPILER=g++-12 ..
      - name: Configure freeorion
        if: ${{ matrix.image == 'manjaro' || matrix.image == 'void-musl' }}
        run: |
          docker run -v "$(pwd):/freeorion" -v "${{ runner.temp }}/ccache:/ccache_dir" -e CCACHE_DIR='/ccache_dir' -w /freeorion/build ${{ steps.prep.outputs.tagged_image }} /usr/bin/cmake -DBUILD_CLIENT_GODOT=Off -DBUILD_TESTING=ON ..
      - name: Configure freeorion
        if: ${{ matrix.image != 'ubuntu-23.04' && matrix.image != 'manjaro' && matrix.image != 'void-musl' }}
        run: |
          docker run -v "$(pwd):/freeorion" -v "${{ runner.temp }}/ccache:/ccache_dir" -e CCACHE_DIR='/ccache_dir' -w /freeorion/build ${{ steps.prep.outputs.tagged_image }} /usr/bin/cmake -DBUILD_CLIENT_GODOT=ON -DGODOT_CUSTOM_API_FILE=/freeorion/build/godot-api.json -DBUILD_TESTING=ON ..
      - name: Build freeorion
        run: |
          docker run -v "$(pwd):/freeorion" -v "${{ runner.temp }}/ccache:/ccache_dir" -e CCACHE_DIR='/ccache_dir' -e GIT_SSL_NO_VERIFY=true -w /freeorion/build ${{ steps.prep.outputs.tagged_image }} /usr/bin/cmake --build . -- -j 2
      - name: Test freeorion
        run: |
          docker run -v "$(pwd):/freeorion" -v "${{ runner.temp }}/ccache:/ccache_dir" -e CCACHE_DIR='/ccache_dir' -e FO_TEST_HOSTLESS_GAMES=1 -w /freeorion/build ${{ steps.prep.outputs.tagged_image }} /usr/bin/cmake --build . --target unittest
      - name: Run godot
        if: ${{ matrix.image != 'manjaro' && matrix.image != 'void-musl' }}
        run: |
          docker run -v "$(pwd):/freeorion" -v "${{ runner.temp }}/ccache:/ccache_dir" -e CCACHE_DIR='/ccache_dir' -w /freeorion/ ${{ steps.prep.outputs.tagged_image }} /freeorion/build/godot --disable-render-loop --verbose -s --path godot addons/gut/gut_cmdln.gd -gdir=res://test/ -ginclude_subdirs -gexit
      - name: Cleanup
        run: |
          docker run -v "$(pwd):/freeorion" -w /freeorion/ ${{ steps.prep.outputs.tagged_image }} rm -rf /freeorion/build/
