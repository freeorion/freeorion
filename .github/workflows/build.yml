name: Build FreeOrion and run unit tests
on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
  push:
    branches:
      - master
jobs:
  build-linux:
    name: Build FreeOrion on Ubuntu 18.04 (Bionic)
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: build-linux-install-cache-id
        with:
          path: ${{ runner.temp }}/cache-build-linux-install
          key: build-linux-install-cache-key-v1.0
      - uses: airvzxf/cache-anything-new-action@v1.0
        with:
          script: 'install-build.sh'
          is_cached: ${{ steps.build-linux-install-cache-id.outputs.cache-hit }}
          cache: ${{ runner.temp }}/cache-build-linux-install
          snapshot: '/'
          exclude: '/boot /data /dev /mnt /proc /run /sys'
      - name: Prepare ccache timestamp
        id: build-linux-ccache-timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: ccache files
        uses: actions/cache@v1.1.0
        with:
          path: ${{ runner.temp }}/ccache
          key: build-linux-ccache-${{ steps.build-linux-ccache-timestamp.outputs.timestamp }}
          restore-keys: |
            build-linux-ccache-
      - name: Build
        env:
          CACHE_NAME: linux
          CCACHE_DIR: ${{ runner.temp }}/ccache
          CMAKE_BUILD_PARALLEL_LEVEL: 2
        run: |
          echo "----------------------------------------"
          ccache -s || true
          echo "----------------------------------------"
          mkdir build
          cd build
          cmake -DBUILD_TESTING=ON ..
          cmake --build .
          echo "----------------------------------------"
          ccache -s || true
          echo "----------------------------------------"
      - name: Test
        run: |
          cd build
          cmake --build . --config Release --target unittest || echo Failure
  build-linux-headless:
    name: Build headless FreeOrion on Ubuntu 18.04 (Bionic)
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: build-linux-install-cache-id
        with:
          path: ${{ runner.temp }}/cache-build-linux-install
          key: build-linux-install-cache-key-v1.0
      - uses: airvzxf/cache-anything-new-action@v1.0
        with:
          script: 'install-build.sh'
          is_cached: ${{ steps.build-linux-install-cache-id.outputs.cache-hit }}
          cache: ${{ runner.temp }}/cache-build-linux-install
          snapshot: '/'
          exclude: '/boot /data /dev /mnt /proc /run /sys'
      - name: Prepare ccache timestamp
        id: build-linux-ccache-timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: ccache files
        uses: actions/cache@v1.1.0
        with:
          path: ${{ runner.temp }}/ccache
          key: build-linux-ccache-${{ steps.build-linux-ccache-timestamp.outputs.timestamp }}
          restore-keys: |
            build-linux-ccache-
      - name: Build
        env:
          CACHE_NAME: linux
          CCACHE_DIR: ${{ runner.temp }}/ccache
          CMAKE_BUILD_PARALLEL_LEVEL: 2
        run: |
          echo "----------------------------------------"
          ccache -s || true
          echo "----------------------------------------"
          mkdir build
          cd build
          cmake -DBUILD_TESTING=ON -DBUILD_CLIENT_GG=OFF ..
          cmake --build .
          echo "----------------------------------------"
          ccache -s || true
          echo "----------------------------------------"
      - name: Test
        run: |
          cd build
          cmake --build . --config Release --target unittest || echo Failure
  build-macos:
    name: Build FreeOrion on MacOS
    if: false # ToDo: Fix compilation
    runs-on: macos-10.15
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Clean up Mono
        run: sudo ./.github/workflows/mono-uninstall.sh
      - name: Cache compilation
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ccache-macos
      - name: Build
        env:
          CACHE_NAME: macos-full
          CMAKE_BUILD_PARALLEL_LEVEL: 2
          HOMEBREW_NO_AUTO_UPDATE: 1
        run: |
          export PATH="/usr/local/opt/ccache/libexec:$PATH"
          brew install ccache
          ccache --set-config=max_size=500M --set-config=sloppiness=file_macro
          ccache --zero-stats
          mkdir build
          cd build
          alias cmake="/usr/local/bin/gtimeout 40m /usr/local/bin/cmake"
          cmake -GXcode -DBUILD_TESTING=OFF -DBoost_NO_BOOST_CMAKE=ON -DGLEW_USE_STATIC_LIBS=ON ..
          cmake --build . --config Release -- -parallelizeTargets
          ccache --cleanup
          ccache --show-stats
  build-windows:
    name: Build FreeOrion on Windows
    if: false # ToDo: Fix compilation
    runs-on: windows-2019
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Download SDK
        id: download-sdk
        uses: suisei-cn/actions-download-file@v1
        with:
          url: https://github.com/freeorion/freeorion-sdk/releases/download/v11/FreeOrionSDK_11_MSVC-v141-Win32.zip
          target: ../
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: '[16.0,16.10)'
      - name: Build
        run: |
          unzip -q ../${{ steps.download-sdk.outputs.filename }} -d ..
          cp ..\bin\* .
          mkdir build
          pushd build
          cmake -G "Visual Studio 16 2019" -T v141 -A Win32 -DBUILD_TESTING=On ..
          cmake --build . --config "Release" -- /maxcpucount /property:BuildInParallel=true /property:CL_MPCount=2 /verbosity:minimal
