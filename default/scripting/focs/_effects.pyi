from typing import Any, TypeVar

class _Scope:
    def __and__(self, other: _Scope) -> _Scope: ...
    def __or__(self, other: _Scope) -> _Scope: ...
    def __invert__(self) -> _Scope: ...

def Planet() -> _Scope: ...

System = _Scope()

# TODO define meaningful type
AnyEmpire = None

def OwnedBy(affiliation) -> _Scope: ...
def WithinStarlaneJumps(*, jumps: int, condition: _Scope) -> _Scope: ...
def Contains(scope=_Scope) -> _Scope: ...
def Turn(high: int = 0, low: int = 0) -> _Scope: ...

class _Effect: ...

T = TypeVar("T")

class ValuePlaceHolder:
    def __add__(self, other: T) -> T: ...
    def __sub__(self, other: T) -> T: ...
    def __mul__(self, other: T) -> T: ...
    def __floordiv__(self, other: T) -> T: ...

Value = ValuePlaceHolder()

class FloatValue:
    def __add__(self, other: FloatValue | float) -> FloatValue: ...
    def __sub__(self, other: FloatValue | float) -> FloatValue: ...
    def __mul__(self, other: FloatValue | float) -> FloatValue: ...
    def __floordiv__(self, other: FloatValue | float) -> FloatValue: ...

def NamedReal(*, name: str, value: FloatValue | float) -> FloatValue: ...
def SetMaxShield(*, value: FloatValue | float) -> _Effect: ...
def SetMaxTroops(*, value: FloatValue | float) -> _Effect: ...
def SetPopulation(*, value: FloatValue | float) -> _Effect: ...
def SetMaxDefense(*, value: FloatValue | float) -> _Effect: ...
def CreateBuilding(*, type: str) -> _Effect: ...
def CreateShip(designname: str, species: str) -> _Effect: ...

class _StarType: ...

Blue = _StarType()

def SetStarType(*, type: _StarType) -> _Effect: ...

class Target:
    Owner = ...
    Population = FloatValue()
    TargetPopulation = FloatValue()

class _Owner: ...

class Source:
    Owner: _Owner
    ID: Any
    SystemID: Any

def GenerateSitRepMessage(
    message: str,
    label: str,
    icon: str,
    parameters: dict[str, Any],
    empire: _Owner,
) -> _Effect: ...
def GiveEmpireTech(name: str, empire) -> _Effect: ...
def EffectsGroup(
    *,
    scope: _Scope,
    effects: list[_Effect] | _Effect,
    activation: _Scope = _Scope(),
    description: str = "",
    priority=None,
): ...

IsSource = _Scope()

def Object(id) -> _Scope: ...

class _PlanetType: ...

Swamp = _PlanetType()
Toxic = _PlanetType()
Inferno = _PlanetType()
Radiated = _PlanetType()
Barren = _PlanetType()
Tundra = _PlanetType()
Desert = _PlanetType()
Terran = _PlanetType()
Ocean = _PlanetType()
AsteroidsType = _PlanetType()
GasGiantType = _PlanetType()

class _Condition: ...

Good = _Condition()
