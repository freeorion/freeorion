from typing import Any

from typing_extensions import TypeAlias

# Default value for int keyword arguments, use it when default value is not clear
from focs._types import (
    _ID,
    _T,
    _Agregator,
    _Effect,
    _Empire,
    _FloatValue,
    _Focus,
    _IntComparableScope,
    _IntValue,
    _PlanetEnvironment,
    _PlanetId,
    _PlanetSize,
    _PlanetType,
    _Resource,
    _Scope,
    _Species,
    _StarType,
    _SystemID,
    _Turn,
    _Value,
    _Visibility,
)

_SOME_INT = int()

Blue = _StarType()
White = _StarType()

def Object(id) -> _Scope: ...

Invisible = _Visibility()
Basic = _Visibility()
Partial = _Visibility()
Full = _Visibility()

Tiny = _PlanetSize()
Small = _PlanetSize()
Medium = _PlanetSize()
Large = _PlanetSize()

Swamp = _PlanetType()
Toxic = _PlanetType()
Inferno = _PlanetType()
Radiated = _PlanetType()
Barren = _PlanetType()
Tundra = _PlanetType()
Desert = _PlanetType()
Terran = _PlanetType()
Ocean = _PlanetType()
AsteroidsType = _PlanetType()
GasGiantType = _PlanetType()

Good = _PlanetEnvironment()
Adequate = _PlanetEnvironment()
Poor = _PlanetEnvironment()
Hostile = _PlanetEnvironment()
Uninhabitable = _PlanetEnvironment()

ThisSpecies = _Species()

def NamedIntegerLookup(*, name: str) -> _Value[int]: ...

_NumberType = _Value | int | float

AnyEmpire = _Empire()
EnemyOf = _Empire()

CurrentTurn = _Turn()

class Target:
    Owner: _Empire
    ID: _ID
    Construction: Any
    Population: _FloatValue
    TargetPopulation: _FloatValue
    MaxSupply: _FloatValue
    Happiness: _FloatValue
    MaxTroops: _FloatValue
    HabitableSize: _FloatValue
    TargetHappiness: _FloatValue
    TargetResearch: _FloatValue
    TargetInfluence: _FloatValue
    TargetIndustry: _FloatValue
    TargetConstruction: _FloatValue
    MaxStockpile: _FloatValue
    PreviousSystemID: _SystemID
    TurnsSinceFocusChange: int

class _SystemInfo:
    LastTurnBattleHere: int
    ID: _ID

class Source:
    """
    FOCS Source is IsSource, this class is fpr Source.<something>
    """

    Owner: _Empire
    ID: _ID
    SystemID: _SystemID
    Species: _Species
    System: _SystemInfo
    TargetPopulation: _FloatValue
    Research: _FloatValue
    Industry: _FloatValue

class LocalCandidate:
    LastTurnConquered: _Turn
    TurnsSinceFocusChange: _Turn
    LastTurnAttackedByShip: _Turn
    ArrivedOnTurn: int
    ID: _ID
    Owner: _Empire
    Focus: _Focus
    NextSystemID: _SystemID
    System: _SystemInfo
    OrderedColonizePlanetID: _PlanetId
    Species: _Species
    LastInvadedByEmpire: _Empire
    LastColonizedByEmpire: _Empire

class RootCandidate:
    Owner: _Empire
    PreviousSystemID: _SystemID

def IsBuilding(*, name: list[str] = []) -> _Scope: ...
def Number(*, low: int, condition: _Scope) -> _Scope: ...
def IsTarget() -> _Scope: ...
def Planet(
    *, type: list[_PlanetType] = [], environment: list[_PlanetEnvironment] = [], size: list[_PlanetSize] = []
) -> _Scope: ...
def Star(*, type: list[_StarType]) -> _Scope: ...
def HasSpecies(name: list[_Value[str] | _Species | str] = []) -> _Scope: ...
def Population(low: float = 0.0, high: float = 0.0) -> _Scope: ...
def Homeworld(name: list[_Species] = []) -> _Scope: ...
def HasTag(*, name: str) -> _Scope: ...
def VisibleToEmpire(empire: _Empire) -> _Scope: ...
def ContainedBy(condition: _Scope) -> _Scope: ...
def TargetPopulation(*, high: int) -> _Scope:
    pass

def HasSpecial(*, name: str) -> _Scope: ...
def OwnerHasTech(*, name: str) -> _Scope: ...

System = _Scope()
Ship = _Scope()
Armed = _Scope()
Unowned = _Scope()
Capital = _Scope()
IsHuman = _Scope()
Fleet = _Scope()
Stationary = _Scope()

def InSystem() -> _Scope: ...

GalaxyMaxAIAggression = _IntComparableScope()
GalaxyMonsterFrequency = _IntComparableScope()

def JumpsBetween(source: _ID, target: _ID) -> _IntValue: ...
def TargetIndustry(*, low: int) -> _Scope: ...
def Happiness(*, low: _NumberType) -> _Scope: ...
def Focus(*, type: list[str]) -> _Scope: ...
def Random(*, probability: _NumberType) -> _Scope: ...

class FocusTypeObject: ...

def FocusType(
    *,
    name: str,
    description: str,
    location: _Scope,
    graphic: str,
) -> FocusTypeObject: ...
def OwnedBy(*, affiliation: _Empire = _Empire(), empire: _Empire = _Empire()) -> _Scope: ...
def WithinStarlaneJumps(*, jumps: int | _Value[int], condition: _Scope) -> _Scope: ...
def WithinDistance(distance: int, condition: _Scope) -> _Scope: ...
def ResourceSupplyConnected(empire: _Empire, condition: _Scope) -> _Scope: ...
def Contains(scope: _Scope) -> _Scope: ...
def Turn(high: int = _SOME_INT, low: int = _SOME_INT) -> _Scope: ...
def DesignHasPart(*, name: str, low: int = _SOME_INT, high: int = _SOME_INT) -> _Scope: ...
def EmpireHasAdoptedPolicy(*, empire: _Empire, name: str) -> _Scope: ...

Influence = _Resource()

def HasEmpireStockpile(empire: _Empire, resource: _Resource, low: int) -> _Scope: ...

Destroy = _Effect()

class ValuePlaceHolder(_Value):
    def __call__(self, value) -> _Value: ...

Value = ValuePlaceHolder()

Min = _Agregator()
Max = _Agregator()
Sum = _Agregator()
Mode = _Agregator()

NoEffect = _Effect()

_RuleType: TypeAlias = type[float] | type[int] | type[str]

def GameRule(*, type: _RuleType, name: str) -> _NumberType: ...
def OneOf(type_: type[str], *args: str) -> str: ...
def Abs(type_: type[_T], value: _NumberType) -> _Value[_T]: ...
def MinOf(type_: type[_T], *args: _NumberType) -> _Value[_T]: ...
def MaxOf(type_: type[_T], *args: _NumberType) -> _Value[_T]: ...
def DirectDistanceBetween(target: _ID, source: _SystemID) -> float: ...
def Conditional(
    *,
    condition: _Scope,
    effects: list[_Effect],
    else_: list[_Effect],
) -> _Effect: ...
def StatisticIf(type_: type[_T], condition: _Scope) -> _Value[_T]: ...
def StatisticCount(type_: type[_T], condition: _Scope) -> _Value[_T]: ...
def Statistic(type_: type[_T], aggregator: _Agregator, value: _T, condition: _Scope) -> _Value[_T]: ...
def NamedReal(*, name: str, value: _NumberType) -> _FloatValue: ...
def NamedRealLookup(*, name: str) -> _Value: ...
def SpeciesShipsDestroyed(empire: _Empire, name: _Species) -> _IntValue: ...
def SpeciesShipsLost(empire: _Empire, name: _Species) -> _IntValue: ...
def SpeciesEmpireTargetOpinion(*, species: _Species, empire: _Empire) -> _FloatValue: ...
def AddSpecial(*, name: str) -> _Effect: ...
def RemoveSpecial(*, name: str) -> _Effect: ...
def EmpireStockpile(empire: _Empire, resource: _Resource) -> _FloatValue: ...
def PartCapacity(*, name: str) -> _FloatValue: ...
def SetMaxShield(*, value: _NumberType) -> _Effect: ...
def SetTargetIndustry(*, value: _NumberType) -> _Effect: ...
def SetDetection(*, value: _NumberType) -> _Effect: ...
def SetFuel(*, value: _NumberType) -> _Effect: ...
def SetMaxTroops(*, value: _NumberType) -> _Effect: ...
def SetStockpile(*, value: _NumberType) -> _Effect: ...
def SetMaxStockpile(*, value: _NumberType) -> _Effect: ...
def SetTargetHappiness(*, value: _NumberType) -> _Effect: ...
def UnlockPolicy(*, name: str) -> _Effect: ...
def SetVisibility(empire: _Empire, visibility: Any) -> _Effect: ...
def SetPopulation(*, value: _NumberType) -> _Effect: ...
def SetTroops(*, value: _NumberType) -> _Effect: ...
def SetMaxDefense(*, value: _NumberType) -> _Effect: ...
def SetSupply(*, value: _NumberType) -> _Effect: ...
def SetTargetResearch(*, value: _NumberType) -> _Effect: ...
def SetHappiness(*, value: _NumberType) -> _Effect: ...
def SetPlanetSize(*, planetsize: _PlanetSize) -> _Effect: ...
def SetMaxSupply(*, value: _NumberType) -> _Effect: ...
def SetMaxFuel(*, value: _NumberType) -> _Effect: ...
def SetResearch(*, value: _NumberType) -> _Effect: ...
def SetIndustry(*, value: _NumberType) -> _Effect: ...
def SetInfluence(*, value: _NumberType) -> _Effect: ...
def SetSpeciesTargetOpinion(*, species: _Species, empire: _Empire, opinion: _Value[float] | float) -> _Effect: ...
def SetSpeciesOpinion(*, species: _Species, empire: _Empire, opinion: _Value[float] | float) -> _Effect: ...
def SetTargetPopulation(*, value: _NumberType, accountinglabel: str = "") -> _Effect: ...
def SetTargetInfluence(*, value: _NumberType) -> _Effect: ...
def SetTargetConstruction(*, value: _NumberType) -> _Effect: ...
def SetConstruction(*, value: _NumberType) -> _Effect: ...
def SetRebelTroops(*, value: _NumberType) -> _Effect: ...
def SetStealth(*, value: _NumberType) -> _Effect: ...
def CreateBuilding(*, type: str) -> _Effect: ...
def CreateShip(*, designname: str, species: str = "") -> _Effect: ...
def SetCapacity(*, partname: str, value: _NumberType) -> _Effect: ...
def SetMaxDamage(*, partname: str, value: _NumberType) -> _Effect: ...
def SetMaxSecondaryStat(*, partname: str, value: _NumberType) -> _Effect: ...
def MoveTo(destination: _Scope) -> _Effect: ...
def MoveTowards(speed: int, target: _Scope) -> _Effect: ...
def SetStarType(*, type: _StarType) -> _Effect: ...
def GenerateSitRepMessage(
    message: str,
    label: str,
    parameters: dict[str, Any],
    empire: _Empire,
    icon: str = "",
) -> _Effect: ...
def GiveEmpireTech(name: str, empire=_Empire()) -> _Effect: ...
def EffectsGroup(
    *,
    scope: _Scope,
    effects: list[_Effect] | _Effect,
    activation: _Scope = _Scope(),
    description: str = "",
    priority=None,
    accountinglabel: str = "",
    stackinggroup: str = "",
): ...

IsSource = _Scope()

def OnPlanet(*, id: _ID) -> _Scope: ...
