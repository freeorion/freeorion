# Autogenerated do not modify manually!
# This is a type-hinting python stub file, used by python IDEs to provide type hints. For more information
# about stub files, see https://www.python.org/dev/peps/pep-0484/#stub-files
# During execution, the actual module is made available via
# a C++ Boost-python process as part of the launch.
from typing import Dict


class AccountingInfo:
    @property
    def causeType(self):
        ...

    @property
    def customLabel(self):
        ...

    @property
    def meterChange(self):
        ...

    @property
    def meterRunningTotal(self):
        ...

    @property
    def sourceID(self):
        ...

    @property
    def specificCause(self):
        ...


class AccountingInfoVec:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...

    def append(self, obj: object) -> None:
        ...

    def extend(self, obj: object) -> None:
        ...


class FleetPlan:
    def name(self) -> object:
        ...

    def ship_designs(self) -> list:
        ...


class GalaxySetupData:
    @property
    def age(self)-> galaxySetupOption:
        ...

    @property
    def gameUID(self)-> str:
        ...

    @property
    def maxAIAggression(self)-> aggression:
        ...

    @property
    def monsterFrequency(self)-> galaxySetupOption:
        ...

    @property
    def nativeFrequency(self)-> galaxySetupOption:
        ...

    @property
    def planetDensity(self)-> galaxySetupOption:
        ...

    @property
    def seed(self)-> str:
        ...

    @property
    def shape(self)-> galaxyShape:
        ...

    @property
    def size(self)-> int:
        ...

    @property
    def specialsFrequency(self)-> galaxySetupOption:
        ...

    @property
    def starlaneFrequency(self)-> galaxySetupOption:
        ...


class GameRules:
    @property
    def empty(self)-> bool:
        ...

    def getDescription(self, string: str) -> str:
        ...

    def getDouble(self, string: str) -> float:
        ...

    def getInt(self, string: str) -> int:
        ...

    def getRulesAsStrings(self) -> StringsMap:
        ...

    def getString(self, string: str) -> str:
        ...

    def getToggle(self, string: str) -> bool:
        ...

    def ruleExists(self, string: str) -> bool:
        ...

    def ruleExistsWithType(self, string: str, rule_type: ruleType) -> bool:
        ...


class IntBoolMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class IntDblMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class IntFltMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class IntIntDblMapMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class IntIntMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class IntMeterTypeAccountingInfoVecMapPair:
    @property
    def meterAccounting(self):
        ...

    @property
    def targetID(self):
        ...


class IntPairVec:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...

    def append(self, obj: object) -> None:
        ...

    def extend(self, obj: object) -> None:
        ...


class IntSet:
    def __contains__(self, number: int) -> bool:
        ...

    def __iter__(self) -> iter:
        ...

    def __len__(self) -> int:
        ...

    def count(self, number: int) -> int:
        ...

    def empty(self) -> bool:
        ...

    def size(self) -> int:
        ...


class IntSetSet:
    def __contains__(self, int_set: IntSet) -> bool:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def count(self, int_set: IntSet) -> int:
        ...

    def empty(self) -> bool:
        ...

    def size(self) -> int:
        ...


class IntStringMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class IntVec:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> iter:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...

    def append(self, obj: object) -> None:
        ...

    def extend(self, obj: object) -> None:
        ...


class MeterTypeAccountingInfoVecMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class MeterTypeAccountingInfoVecPair:
    @property
    def accountingInfo(self):
        ...

    @property
    def meterType(self):
        ...


class MeterTypeMeterMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class MeterTypeStringPair:
    @property
    def meterType(self):
        ...

    @property
    def string(self):
        ...


class MonsterFleetPlan:
    def locations(self, item_list: list) -> list:
        ...

    def name(self) -> object:
        ...

    def ship_designs(self) -> list:
        ...

    def spawn_limit(self) -> int:
        ...

    def spawn_rate(self) -> float:
        ...


class PairIntInt_IntMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class PlayerSetupData:
    @property
    def empire_color(self):
        ...

    @property
    def empire_name(self):
        ...

    @property
    def player_name(self):
        ...

    @property
    def starting_species(self):
        ...

    @property
    def starting_team(self):
        ...


class ShipPartMeterMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class ShipSlotVec:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...

    def append(self, obj: object) -> None:
        ...

    def extend(self, obj: object) -> None:
        ...


class StatRecordsMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class StringIntMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class StringSet:
    def __contains__(self, string: str) -> bool:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def count(self, string: str) -> int:
        ...

    def empty(self) -> bool:
        ...

    def size(self) -> int:
        ...


class StringVec:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> iter:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...

    def append(self, obj: object) -> None:
        ...

    def extend(self, obj: object) -> None:
        ...


class String_IntStringMap_Map:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class StringsMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class TargetIDAccountingMapMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class UnlockableItem:
    @property
    def name(self)-> str:
        ...

    @property
    def type(self)-> unlockableItemType:
        ...


class UnlockableItemVec:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...

    def append(self, obj: object) -> None:
        ...

    def extend(self, obj: object) -> None:
        ...


class VisibilityIntMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class buildingType:
    @property
    def costTimeLocationInvariant(self)-> bool:
        ...

    @property
    def description(self)-> str:
        ...

    @property
    def name(self)-> str:
        ...

    def canBeEnqueued(self, number1: int, number2: int) -> bool:
        ...

    def canBeProduced(self, number1: int, number2: int) -> bool:
        ...

    def captureResult(self, number1: int, number2: int, number3: int, boolean: bool) -> captureResult:
        ...

    def dump(self, number: int) -> str:
        """
        Returns string with debug information, use '0' as argument.
        """

    def perTurnCost(self, number1: int, number2: int) -> float:
        ...

    def productionCost(self, number1: int, number2: int) -> float:
        ...

    def productionTime(self, number1: int, number2: int) -> int:
        ...


class diplomaticMessage:
    @property
    def recipient(self)-> int:
        ...

    @property
    def sender(self)-> int:
        ...

    @property
    def type(self)-> diplomaticMessageType:
        ...


class diplomaticStatusUpdate:
    @property
    def empire1(self):
        ...

    @property
    def empire2(self):
        ...

    @property
    def status(self):
        ...


class empire:
    @property
    def adoptedPolicies(self)-> StringVec:
        ...

    @property
    def allShipDesigns(self)-> IntSet:
        ...

    @property
    def availableBuildingTypes(self)-> StringSet:
        ...

    @property
    def availablePolicies(self)-> StringSet:
        ...

    @property
    def availableShipDesigns(self)-> IntSet:
        ...

    @property
    def availableShipHulls(self)-> StringSet:
        ...

    @property
    def availableShipParts(self)-> StringSet:
        ...

    @property
    def availableTechs(self)-> StringSet:
        ...

    @property
    def capitalID(self)-> int:
        ...

    @property
    def categoriesSlotPolicies(self)-> String_IntStringMap_Map:
        ...

    @property
    def colour(self)-> tuple:
        ...

    @property
    def eliminated(self)-> bool:
        ...

    @property
    def empireID(self)-> int:
        ...

    @property
    def emptyPolicySlots(self)-> StringIntMap:
        ...

    @property
    def exploredSystemIDs(self)-> IntSet:
        ...

    @property
    def fleetSupplyableSystemIDs(self)-> IntSet:
        ...

    @property
    def name(self)-> str:
        ...

    @property
    def planetsWithAllocatedPP(self)-> resPoolMap:
        ...

    @property
    def planetsWithAvailablePP(self)-> resPoolMap:
        ...

    @property
    def planetsWithWastedPP(self)-> IntSetSet:
        ...

    @property
    def playerName(self)-> str:
        ...

    @property
    def productionPoints(self)-> float:
        ...

    @property
    def productionQueue(self)-> productionQueue:
        ...

    @property
    def researchQueue(self)-> researchQueue:
        ...

    @property
    def supplyUnobstructedSystems(self)-> IntSet:
        ...

    @property
    def systemSupplyRanges(self)-> IntFltMap:
        ...

    @property
    def totalPolicySlots(self)-> StringIntMap:
        ...

    @property
    def turnsPoliciesAdopted(self)-> StringIntMap:
        ...

    @property
    def won(self)-> bool:
        ...

    def buildingTypeAvailable(self, string: str) -> bool:
        ...

    def canBuild(self, build_type: buildType, string: str, number: int) -> bool:
        ...

    def getMeter(self, string: str) -> meter:
        """
        Returns the empire meter with the indicated name (string).
        """

    def getResourcePool(self, resource_type: resourceType) -> resPool:
        ...

    def getTechStatus(self, string: str) -> techStatus:
        ...

    def hasExploredSystem(self, number: int) -> bool:
        ...

    def obstructedStarlanes(self) -> IntPairVec:
        ...

    def policyAdopted(self, string: str) -> bool:
        ...

    def policyAvailable(self, string: str) -> bool:
        ...

    def population(self) -> float:
        ...

    def preservedLaneTravel(self, number1: int, number2: int) -> bool:
        ...

    def productionCostAndTime(self, production_queue_element: productionQueueElement) -> object:
        ...

    def researchProgress(self, string: str) -> float:
        ...

    def resourceAvailable(self, resource_type: resourceType) -> float:
        ...

    def resourceProduction(self, resource_type: resourceType) -> float:
        ...

    def resourceStockpile(self, resource_type: resourceType) -> float:
        ...

    def shipDesignAvailable(self, number: int) -> bool:
        ...

    def slotPolicyAdoptedIn(self, string: str) -> int:
        ...

    def supplyProjections(self) -> Dict[int, int]:
        ...

    def techResearched(self, string: str) -> bool:
        ...

    def turnPolicyAdopted(self, string: str) -> int:
        ...


class fieldType:
    @property
    def description(self)-> str:
        ...

    @property
    def name(self)-> str:
        ...

    def dump(self, number: int) -> str:
        """
        Returns string with debug information, use '0' as argument.
        """


class influenceQueue:
    @property
    def allocatedStockpileIP(self):
        ...

    @property
    def empireID(self):
        ...

    @property
    def empty(self):
        ...

    @property
    def expectedNewStockpile(self):
        ...

    @property
    def size(self):
        ...

    @property
    def totalSpent(self):
        ...

    def __contains__(self, influence_queue_element: influenceQueueElement) -> bool:
        ...

    def __getitem__(self, number: int) -> influenceQueueElement:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def inQueue(self, string: str) -> bool:
        ...


class influenceQueueElement:
    @property
    def allocation(self):
        ...

    @property
    def name(self):
        ...


class meter:
    @property
    def current(self)-> float:
        ...

    @property
    def initial(self)-> float:
        ...

    def dump(self, number: int) -> str:
        """
        Returns string with debug information, use '0' as argument.
        """


class policy:
    @property
    def category(self):
        ...

    @property
    def description(self):
        ...

    @property
    def name(self):
        ...

    @property
    def shortDescription(self):
        ...

    def adoptionCost(self, number: int, obj: object) -> float:
        ...


class popCenter:
    @property
    def speciesName(self):
        ...


class productionQueue:
    @property
    def allocatedPP(self)-> resPoolMap:
        ...

    @property
    def empireID(self)-> int:
        ...

    @property
    def empty(self)-> bool:
        ...

    @property
    def size(self)-> int:
        ...

    @property
    def totalSpent(self)-> float:
        ...

    def __getitem__(self, number: int) -> productionQueueElement:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def availablePP(self, res_pool: resPool) -> resPoolMap:
        ...

    def objectsWithWastedPP(self, res_pool: resPool) -> IntSetSet:
        ...


class productionQueueElement:
    @property
    def allocation(self):
        ...

    @property
    def allowedStockpile(self):
        ...

    @property
    def blocksize(self):
        ...

    @property
    def buildType(self):
        ...

    @property
    def designID(self):
        ...

    @property
    def locationID(self):
        ...

    @property
    def name(self):
        ...

    @property
    def paused(self):
        ...

    @property
    def progress(self):
        ...

    @property
    def remaining(self):
        ...

    @property
    def turnsLeft(self):
        ...


class resPool:
    ...


class resPoolMap:
    def __contains__(self, obj: object) -> bool:
        ...

    def __delitem__(self, obj: object) -> None:
        ...

    def __getitem__(self, obj: object) -> object:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def __setitem__(self, obj1: object, obj2: object) -> None:
        ...


class researchQueue:
    @property
    def empireID(self)-> int:
        ...

    @property
    def empty(self)-> bool:
        ...

    @property
    def size(self)-> int:
        ...

    @property
    def totalSpent(self)-> float:
        ...

    def __contains__(self, research_queue_element: researchQueueElement) -> bool:
        ...

    def __getitem__(self, number: int) -> researchQueueElement:
        ...

    def __iter__(self) -> object:
        ...

    def __len__(self) -> int:
        ...

    def inQueue(self, string: str) -> bool:
        ...


class researchQueueElement:
    @property
    def allocation(self):
        ...

    @property
    def tech(self):
        ...

    @property
    def turnsLeft(self):
        ...


class resourceCenter:
    @property
    def availableFoci(self):
        ...

    @property
    def focus(self):
        ...

    @property
    def turnsSinceFocusChange(self):
        ...


class shipDesign:
    @property
    def attack(self)-> float:
        ...

    @property
    def attackStats(self)-> IntVec:
        ...

    @property
    def canColonize(self)-> bool:
        ...

    @property
    def canInvade(self)-> bool:
        ...

    @property
    def colonyCapacity(self)-> float:
        ...

    @property
    def costTimeLocationInvariant(self)-> bool:
        ...

    @property
    def defense(self)-> float:
        ...

    @property
    def description(self)-> str:
        ...

    @property
    def designedOnTurn(self)-> int:
        ...

    @property
    def detection(self)-> float:
        ...

    @property
    def fuel(self)-> float:
        ...

    @property
    def hasDirectWeapons(self)-> bool:
        ...

    @property
    def hasFighters(self)-> bool:
        ...

    @property
    def hull(self)-> str:
        ...

    @property
    def id(self)-> int:
        ...

    @property
    def industryGeneration(self)-> float:
        ...

    @property
    def influenceGeneration(self)-> float:
        ...

    @property
    def isArmed(self)-> bool:
        ...

    @property
    def isMonster(self)-> bool:
        ...

    @property
    def name(self)-> str:
        ...

    @property
    def parts(self)-> StringVec:
        ...

    @property
    def researchGeneration(self)-> float:
        ...

    @property
    def shields(self)-> float:
        ...

    @property
    def ship_hull(self)-> shipHull:
        ...

    @property
    def speed(self)-> float:
        ...

    @property
    def stealth(self)-> float:
        ...

    @property
    def structure(self)-> float:
        ...

    @property
    def troopCapacity(self)-> float:
        ...

    def dump(self, number: int) -> str:
        """
        Returns string with debug information, use '0' as argument.
        """

    def perTurnCost(self, number1: int, number2: int) -> float:
        ...

    def productionCost(self, number1: int, number2: int) -> float:
        ...

    def productionLocationForEmpire(self, number1: int, number2: int) -> bool:
        ...

    def productionTime(self, number1: int, number2: int) -> int:
        ...


class shipHull:
    @property
    def costTimeLocationInvariant(self)-> bool:
        ...

    @property
    def fuel(self)-> float:
        ...

    @property
    def name(self)-> str:
        ...

    @property
    def numSlots(self)-> int:
        ...

    @property
    def slots(self)-> ShipSlotVec:
        ...

    @property
    def speed(self)-> float:
        ...

    @property
    def starlaneSpeed(self)-> float:
        ...

    @property
    def stealth(self)-> float:
        ...

    @property
    def structure(self)-> float:
        ...

    def hasTag(self, string: str) -> bool:
        ...

    def numSlotsOfSlotType(self, ship_slot_type: shipSlotType) -> int:
        ...

    def productionCost(self, number1: int, number2: int, number3: int) -> float:
        ...

    def productionLocation(self, number: int) -> bool:
        """
        Returns the result of Location condition (bool) in passed location_id (int)
        """

    def productionTime(self, number1: int, number2: int, number3: int) -> int:
        ...


class shipPart:
    @property
    def capacity(self)-> float:
        ...

    @property
    def costTimeLocationInvariant(self)-> bool:
        ...

    @property
    def mountableSlotTypes(self)-> ShipSlotVec:
        ...

    @property
    def name(self)-> str:
        ...

    @property
    def partClass(self)-> shipPartClass:
        ...

    @property
    def secondaryStat(self)-> float:
        ...

    def canMountInSlotType(self, ship_slot_type: shipSlotType) -> bool:
        ...

    def productionCost(self, number1: int, number2: int, number3: int) -> float:
        ...

    def productionLocation(self, number: int) -> bool:
        """
        Returns the result of Location condition (bool) in passed location_id (int)
        """

    def productionTime(self, number1: int, number2: int, number3: int) -> int:
        ...


class special:
    @property
    def description(self)-> str:
        ...

    @property
    def name(self)-> str:
        ...

    @property
    def spawnlimit(self)-> int:
        ...

    @property
    def spawnrate(self)-> float:
        ...

    def dump(self, number: int) -> str:
        """
        Returns string with debug information, use '0' as argument.
        """

    def initialCapacity(self, number: int) -> float:
        ...


class species:
    @property
    def canColonize(self)-> bool:
        ...

    @property
    def canProduceShips(self)-> bool:
        ...

    @property
    def description(self)-> str:
        ...

    @property
    def foci(self)-> StringVec:
        ...

    @property
    def homeworlds(self)-> IntSet:
        ...

    @property
    def name(self)-> str:
        ...

    @property
    def preferredFocus(self)-> str:
        ...

    @property
    def spawnlimit(self)-> int:
        ...

    @property
    def spawnrate(self)-> float:
        ...

    @property
    def tags(self)-> StringSet:
        ...

    def dump(self, number: int) -> str:
        """
        Returns string with debug information, use '0' as argument.
        """

    def getPlanetEnvironment(self, planet_type: planetType) -> planetEnvironment:
        ...


class tech:
    @property
    def category(self)-> str:
        ...

    @property
    def description(self)-> str:
        ...

    @property
    def name(self)-> str:
        ...

    @property
    def prerequisites(self)-> StringSet:
        ...

    @property
    def shortDescription(self)-> str:
        ...

    @property
    def unlockedItems(self)-> UnlockableItemVec:
        ...

    @property
    def unlockedTechs(self)-> StringSet:
        ...

    def perTurnCost(self, number: int) -> float:
        ...

    def recursivePrerequisites(self, number: int) -> StringVec:
        ...

    def researchCost(self, number: int) -> float:
        ...

    def researchTime(self, number: int) -> int:
        ...


class universe:
    @property
    def allObjectIDs(self)-> IntVec:
        ...

    @property
    def buildingIDs(self)-> IntVec:
        ...

    @property
    def effectAccounting(self)-> TargetIDAccountingMapMap:
        ...

    @property
    def fieldIDs(self)-> IntVec:
        ...

    @property
    def fleetIDs(self)-> IntVec:
        ...

    @property
    def planetIDs(self)-> IntVec:
        ...

    @property
    def shipIDs(self)-> IntVec:
        ...

    @property
    def systemIDs(self)-> IntVec:
        ...

    def destroyedObjectIDs(self, number: int) -> IntSet:
        ...

    def dump(self) -> None:
        ...

    def getBuilding(self, number: int) -> building:
        ...

    def getField(self, number: int) -> field:
        ...

    def getFleet(self, number: int) -> fleet:
        ...

    def getGenericShipDesign(self, string: str) -> shipDesign:
        """
        Returns the ship design (ShipDesign) with the indicated name (string).
        """

    def getImmediateNeighbors(self, number1: int, number2: int) -> IntVec:
        ...

    def getObject(self, number: int) -> universeObject:
        ...

    def getPlanet(self, number: int) -> planet:
        ...

    def getShip(self, number: int) -> ship:
        ...

    def getSystem(self, number: int) -> system:
        ...

    def getSystemNeighborsMap(self, number1: int, number2: int) -> IntDblMap:
        ...

    def getVisibility(self, number1: int, number2: int) -> visibility:
        ...

    def getVisibilityTurnsMap(self, number1: int, number2: int) -> Dict[int, int]:
        ...

    def jumpDistance(self, number1: int, number2: int) -> int:
        """
        If two system ids are passed or both objects are within a system, return the jump distance between the two systems. If one object (e.g. a fleet) is on a starlane, then calculate the jump distance from both ends of the starlane to the target system and return the smaller one.
        """

    def leastJumpsPath(self, number1: int, number2: int, number3: int) -> IntVec:
        ...

    def linearDistance(self, number1: int, number2: int) -> float:
        ...

    def shortestNonHostilePath(self, number1: int, number2: int, number3: int) -> IntVec:
        """
        Shortest sequence of System ids and distance from System (number1) to System (number2) with no hostile Fleets as determined by visibility of Empire (number3).  (number3) must be a valid empire.
        """

    def shortestPath(self, number1: int, number2: int, number3: int) -> IntVec:
        ...

    def shortestPathDistance(self, number1: int, number2: int) -> float:
        ...

    def statRecords(self) -> StatRecordsMap:
        """
        Empire statistics recorded by the server each turn. Indexed first by staistic name (string), then by empire id (int), then by turn number (int), pointing to the statisic value (double).
        """

    def systemHasStarlane(self, number1: int, number2: int) -> bool:
        ...

    def systemsConnected(self, number1: int, number2: int, number3: int) -> bool:
        ...

    def updateMeterEstimates(self, obj: object) -> None:
        ...


class universeObject:
    @property
    def ageInTurns(self):
        ...

    @property
    def containedObjects(self):
        ...

    @property
    def containerObject(self):
        ...

    @property
    def creationTurn(self):
        ...

    @property
    def id(self):
        ...

    @property
    def meters(self):
        ...

    @property
    def name(self):
        ...

    @property
    def owner(self):
        ...

    @property
    def specials(self):
        ...

    @property
    def systemID(self):
        ...

    @property
    def tags(self):
        ...

    @property
    def unowned(self):
        ...

    @property
    def x(self):
        ...

    @property
    def y(self):
        ...

    def containedBy(self, number: int) -> bool:
        ...

    def contains(self, number: int) -> bool:
        ...

    def currentMeterValue(self, meter_type: meterType) -> float:
        ...

    def dump(self) -> str:
        """
        Returns string with debug information.
        """

    def getMeter(self, meter_type: meterType) -> meter:
        ...

    def hasSpecial(self, string: str) -> bool:
        ...

    def hasTag(self, string: str) -> bool:
        ...

    def initialMeterValue(self, meter_type: meterType) -> float:
        ...

    def ownedBy(self, number: int) -> bool:
        ...

    def specialAddedOnTurn(self, string: str) -> int:
        ...


class building(universeObject):
    @property
    def buildingTypeName(self)-> str:
        ...

    @property
    def orderedScrapped(self)-> bool:
        ...

    @property
    def planetID(self)-> int:
        ...

    @property
    def producedByEmpireID(self)-> int:
        ...


class field(universeObject):
    @property
    def fieldTypeName(self)-> str:
        ...

    def inField(self, base_object: universeObject) -> bool:
        ...


class fleet(universeObject):
    @property
    def aggression(self)-> fleetAggression:
        ...

    @property
    def aggressive(self)-> bool:
        ...

    @property
    def canChangeDirectionEnRoute(self)-> bool:
        ...

    @property
    def empty(self)-> bool:
        ...

    @property
    def finalDestinationID(self)-> int:
        ...

    @property
    def fuel(self)-> float:
        ...

    @property
    def hasArmedShips(self)-> bool:
        ...

    @property
    def hasColonyShips(self)-> bool:
        ...

    @property
    def hasFighterShips(self)-> bool:
        ...

    @property
    def hasMonsters(self)-> bool:
        ...

    @property
    def hasOutpostShips(self)-> bool:
        ...

    @property
    def hasTroopShips(self)-> bool:
        ...

    @property
    def maxFuel(self)-> float:
        ...

    @property
    def nextSystemID(self)-> int:
        ...

    @property
    def numShips(self)-> int:
        ...

    @property
    def obstructive(self)-> bool:
        ...

    @property
    def previousSystemID(self)-> int:
        ...

    @property
    def shipIDs(self)-> IntSet:
        ...

    @property
    def speed(self)-> float:
        ...


class ship(universeObject):
    @property
    def arrivedOnTurn(self)-> int:
        ...

    @property
    def canBombard(self)-> bool:
        ...

    @property
    def canColonize(self)-> bool:
        ...

    @property
    def canInvade(self)-> bool:
        ...

    @property
    def colonyCapacity(self)-> float:
        ...

    @property
    def design(self)-> shipDesign:
        ...

    @property
    def designID(self)-> int:
        ...

    @property
    def fleetID(self)-> int:
        ...

    @property
    def hasFighters(self)-> bool:
        ...

    @property
    def isArmed(self)-> bool:
        ...

    @property
    def isMonster(self)-> bool:
        ...

    @property
    def lastResuppliedOnTurn(self)-> int:
        ...

    @property
    def lastTurnActiveInCombat(self)-> int:
        ...

    @property
    def orderedColonizePlanet(self)-> int:
        ...

    @property
    def orderedInvadePlanet(self)-> int:
        ...

    @property
    def orderedScrapped(self)-> bool:
        ...

    @property
    def partMeters(self)-> ShipPartMeterMap:
        ...

    @property
    def producedByEmpireID(self)-> int:
        ...

    @property
    def speciesName(self)-> str:
        ...

    @property
    def speed(self)-> float:
        ...

    @property
    def troopCapacity(self)-> float:
        ...

    def currentPartMeterValue(self, meter_type: meterType, string: str) -> float:
        ...

    def initialPartMeterValue(self, meter_type: meterType, string: str) -> float:
        ...


class system(universeObject):
    @property
    def buildingIDs(self)-> IntSet:
        ...

    @property
    def fieldIDs(self)-> IntSet:
        ...

    @property
    def fleetIDs(self)-> IntSet:
        ...

    @property
    def lastTurnBattleHere(self)-> int:
        ...

    @property
    def numStarlanes(self)-> int:
        ...

    @property
    def numWormholes(self)-> int:
        ...

    @property
    def planetIDs(self)-> IntSet:
        ...

    @property
    def shipIDs(self)-> IntSet:
        ...

    @property
    def starType(self)-> starType:
        ...

    @property
    def starlanesWormholes(self)-> IntBoolMap:
        ...

    def HasStarlaneToSystemID(self, number: int) -> bool:
        ...

    def HasWormholeToSystemID(self, number: int) -> bool:
        """
        Currently unused.
        """


class planet(universeObject, popCenter, resourceCenter):
    @property
    def InitialOrbitalPosition(self)-> float:
        ...

    @property
    def LastTurnAttackedByShip(self)-> int:
        ...

    @property
    def LastTurnConquered(self)-> int:
        ...

    @property
    def OrbitalPeriod(self)-> float:
        ...

    @property
    def RotationalPeriod(self)-> float:
        ...

    @property
    def buildingIDs(self)-> IntSet:
        ...

    @property
    def clockwiseNextPlanetType(self)-> planetType:
        ...

    @property
    def counterClockwiseNextPlanetType(self)-> planetType:
        ...

    @property
    def distanceFromOriginalType(self)-> int:
        ...

    @property
    def habitableSize(self)-> int:
        ...

    @property
    def nextLargerPlanetSize(self)-> planetSize:
        ...

    @property
    def nextSmallerPlanetSize(self)-> planetSize:
        ...

    @property
    def originalType(self)-> planetType:
        ...

    @property
    def size(self)-> planetSize:
        ...

    @property
    def type(self)-> planetType:
        ...

    def OrbitalPositionOnTurn(self, number: int) -> float:
        ...

    def environmentForSpecies(self, string: str) -> planetEnvironment:
        ...

    def nextBetterPlanetTypeForSpecies(self, string: str) -> planetType:
        ...


class Enum(int):
    """Enum stub for docs, not really present in fo"""
    def __new__(cls, *args, **kwargs):
        return super(Enum, cls).__new__(cls, args[0])


class aggression(Enum):
    def __init__(self, numerator, name):
        self.name = name

    invalid = None  # aggression(-1, "invalid")
    beginner = None  # aggression(0, "beginner")
    turtle = None  # aggression(1, "turtle")
    cautious = None  # aggression(2, "cautious")
    typical = None  # aggression(3, "typical")
    aggressive = None  # aggression(4, "aggressive")
    maniacal = None  # aggression(5, "maniacal")


aggression.invalid = aggression(-1, "invalid")
aggression.beginner = aggression(0, "beginner")
aggression.turtle = aggression(1, "turtle")
aggression.cautious = aggression(2, "cautious")
aggression.typical = aggression(3, "typical")
aggression.aggressive = aggression(4, "aggressive")
aggression.maniacal = aggression(5, "maniacal")


class buildType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    INVALID_BUILD_TYPE = None  # buildType(-1, "INVALID_BUILD_TYPE")
    BT_NOT_BUILDING = None  # buildType(0, "BT_NOT_BUILDING")
    BT_BUILDING = None  # buildType(1, "BT_BUILDING")
    BT_SHIP = None  # buildType(2, "BT_SHIP")
    BT_PROJECT = None  # buildType(3, "BT_PROJECT")
    BT_STOCKPILE = None  # buildType(4, "BT_STOCKPILE")
    NUM_BUILD_TYPES = None  # buildType(5, "NUM_BUILD_TYPES")


buildType.INVALID_BUILD_TYPE = buildType(-1, "INVALID_BUILD_TYPE")
buildType.BT_NOT_BUILDING = buildType(0, "BT_NOT_BUILDING")
buildType.BT_BUILDING = buildType(1, "BT_BUILDING")
buildType.BT_SHIP = buildType(2, "BT_SHIP")
buildType.BT_PROJECT = buildType(3, "BT_PROJECT")
buildType.BT_STOCKPILE = buildType(4, "BT_STOCKPILE")
buildType.NUM_BUILD_TYPES = buildType(5, "NUM_BUILD_TYPES")


class captureResult(Enum):
    def __init__(self, numerator, name):
        self.name = name

    capture = None  # captureResult(0, "capture")
    destroy = None  # captureResult(1, "destroy")
    retain = None  # captureResult(2, "retain")


captureResult.capture = captureResult(0, "capture")
captureResult.destroy = captureResult(1, "destroy")
captureResult.retain = captureResult(2, "retain")


class diplomaticMessageType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    noMessage = None  # diplomaticMessageType(-1, "noMessage")
    warDeclaration = None  # diplomaticMessageType(0, "warDeclaration")
    peaceProposal = None  # diplomaticMessageType(1, "peaceProposal")
    acceptPeaceProposal = None  # diplomaticMessageType(2, "acceptPeaceProposal")
    alliesProposal = None  # diplomaticMessageType(3, "alliesProposal")
    acceptAlliesProposal = None  # diplomaticMessageType(4, "acceptAlliesProposal")
    endAllies = None  # diplomaticMessageType(5, "endAllies")
    cancelProposal = None  # diplomaticMessageType(6, "cancelProposal")
    rejectProposal = None  # diplomaticMessageType(7, "rejectProposal")


diplomaticMessageType.noMessage = diplomaticMessageType(-1, "noMessage")
diplomaticMessageType.warDeclaration = diplomaticMessageType(0, "warDeclaration")
diplomaticMessageType.peaceProposal = diplomaticMessageType(1, "peaceProposal")
diplomaticMessageType.acceptPeaceProposal = diplomaticMessageType(2, "acceptPeaceProposal")
diplomaticMessageType.alliesProposal = diplomaticMessageType(3, "alliesProposal")
diplomaticMessageType.acceptAlliesProposal = diplomaticMessageType(4, "acceptAlliesProposal")
diplomaticMessageType.endAllies = diplomaticMessageType(5, "endAllies")
diplomaticMessageType.cancelProposal = diplomaticMessageType(6, "cancelProposal")
diplomaticMessageType.rejectProposal = diplomaticMessageType(7, "rejectProposal")


class diplomaticStatus(Enum):
    def __init__(self, numerator, name):
        self.name = name

    war = None  # diplomaticStatus(0, "war")
    peace = None  # diplomaticStatus(1, "peace")
    allied = None  # diplomaticStatus(2, "allied")


diplomaticStatus.war = diplomaticStatus(0, "war")
diplomaticStatus.peace = diplomaticStatus(1, "peace")
diplomaticStatus.allied = diplomaticStatus(2, "allied")


class effectsCauseType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    invalid = None  # effectsCauseType(-1, "invalid")
    unknown = None  # effectsCauseType(0, "unknown")
    inherent = None  # effectsCauseType(1, "inherent")
    tech = None  # effectsCauseType(2, "tech")
    building = None  # effectsCauseType(3, "building")
    field = None  # effectsCauseType(4, "field")
    special = None  # effectsCauseType(5, "special")
    species = None  # effectsCauseType(6, "species")
    shipPart = None  # effectsCauseType(7, "shipPart")
    shipHull = None  # effectsCauseType(8, "shipHull")
    policy = None  # effectsCauseType(9, "policy")


effectsCauseType.invalid = effectsCauseType(-1, "invalid")
effectsCauseType.unknown = effectsCauseType(0, "unknown")
effectsCauseType.inherent = effectsCauseType(1, "inherent")
effectsCauseType.tech = effectsCauseType(2, "tech")
effectsCauseType.building = effectsCauseType(3, "building")
effectsCauseType.field = effectsCauseType(4, "field")
effectsCauseType.special = effectsCauseType(5, "special")
effectsCauseType.species = effectsCauseType(6, "species")
effectsCauseType.shipPart = effectsCauseType(7, "shipPart")
effectsCauseType.shipHull = effectsCauseType(8, "shipHull")
effectsCauseType.policy = effectsCauseType(9, "policy")


class fleetAggression(Enum):
    def __init__(self, numerator, name):
        self.name = name

    passive = None  # fleetAggression(0, "passive")
    defensive = None  # fleetAggression(1, "defensive")
    obstructive = None  # fleetAggression(2, "obstructive")
    aggressive = None  # fleetAggression(3, "aggressive")


fleetAggression.passive = fleetAggression(0, "passive")
fleetAggression.defensive = fleetAggression(1, "defensive")
fleetAggression.obstructive = fleetAggression(2, "obstructive")
fleetAggression.aggressive = fleetAggression(3, "aggressive")


class galaxySetupOption(Enum):
    def __init__(self, numerator, name):
        self.name = name

    invalid = None  # galaxySetupOption(-1, "invalid")
    none = None  # galaxySetupOption(0, "none")
    low = None  # galaxySetupOption(1, "low")
    medium = None  # galaxySetupOption(2, "medium")
    high = None  # galaxySetupOption(3, "high")
    random = None  # galaxySetupOption(4, "random")


galaxySetupOption.invalid = galaxySetupOption(-1, "invalid")
galaxySetupOption.none = galaxySetupOption(0, "none")
galaxySetupOption.low = galaxySetupOption(1, "low")
galaxySetupOption.medium = galaxySetupOption(2, "medium")
galaxySetupOption.high = galaxySetupOption(3, "high")
galaxySetupOption.random = galaxySetupOption(4, "random")


class galaxyShape(Enum):
    def __init__(self, numerator, name):
        self.name = name

    invalid = None  # galaxyShape(-1, "invalid")
    spiral2 = None  # galaxyShape(0, "spiral2")
    spiral3 = None  # galaxyShape(1, "spiral3")
    spiral4 = None  # galaxyShape(2, "spiral4")
    cluster = None  # galaxyShape(3, "cluster")
    elliptical = None  # galaxyShape(4, "elliptical")
    disc = None  # galaxyShape(5, "disc")
    box = None  # galaxyShape(6, "box")
    irregular = None  # galaxyShape(7, "irregular")
    ring = None  # galaxyShape(8, "ring")
    random = None  # galaxyShape(9, "random")


galaxyShape.invalid = galaxyShape(-1, "invalid")
galaxyShape.spiral2 = galaxyShape(0, "spiral2")
galaxyShape.spiral3 = galaxyShape(1, "spiral3")
galaxyShape.spiral4 = galaxyShape(2, "spiral4")
galaxyShape.cluster = galaxyShape(3, "cluster")
galaxyShape.elliptical = galaxyShape(4, "elliptical")
galaxyShape.disc = galaxyShape(5, "disc")
galaxyShape.box = galaxyShape(6, "box")
galaxyShape.irregular = galaxyShape(7, "irregular")
galaxyShape.ring = galaxyShape(8, "ring")
galaxyShape.random = galaxyShape(9, "random")


class meterType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    targetPopulation = None  # meterType(0, "targetPopulation")
    targetIndustry = None  # meterType(1, "targetIndustry")
    targetResearch = None  # meterType(2, "targetResearch")
    targetInfluence = None  # meterType(3, "targetInfluence")
    targetConstruction = None  # meterType(4, "targetConstruction")
    targetHappiness = None  # meterType(5, "targetHappiness")
    maxCapacity = None  # meterType(6, "maxCapacity")
    maxDamage = None  # meterType(6, "maxDamage")
    maxSecondaryStat = None  # meterType(7, "maxSecondaryStat")
    maxFuel = None  # meterType(8, "maxFuel")
    maxShield = None  # meterType(9, "maxShield")
    maxStructure = None  # meterType(10, "maxStructure")
    maxDefense = None  # meterType(11, "maxDefense")
    maxSupply = None  # meterType(12, "maxSupply")
    maxStockpile = None  # meterType(13, "maxStockpile")
    maxTroops = None  # meterType(14, "maxTroops")
    population = None  # meterType(15, "population")
    industry = None  # meterType(16, "industry")
    research = None  # meterType(17, "research")
    influence = None  # meterType(18, "influence")
    construction = None  # meterType(19, "construction")
    happiness = None  # meterType(20, "happiness")
    capacity = None  # meterType(21, "capacity")
    damage = None  # meterType(21, "damage")
    secondaryStat = None  # meterType(22, "secondaryStat")
    fuel = None  # meterType(23, "fuel")
    shield = None  # meterType(24, "shield")
    structure = None  # meterType(25, "structure")
    defense = None  # meterType(26, "defense")
    supply = None  # meterType(27, "supply")
    stockpile = None  # meterType(28, "stockpile")
    troops = None  # meterType(29, "troops")
    rebels = None  # meterType(30, "rebels")
    size = None  # meterType(31, "size")
    stealth = None  # meterType(32, "stealth")
    detection = None  # meterType(33, "detection")
    speed = None  # meterType(34, "speed")


meterType.targetPopulation = meterType(0, "targetPopulation")
meterType.targetIndustry = meterType(1, "targetIndustry")
meterType.targetResearch = meterType(2, "targetResearch")
meterType.targetInfluence = meterType(3, "targetInfluence")
meterType.targetConstruction = meterType(4, "targetConstruction")
meterType.targetHappiness = meterType(5, "targetHappiness")
meterType.maxCapacity = meterType(6, "maxCapacity")
meterType.maxDamage = meterType(6, "maxDamage")
meterType.maxSecondaryStat = meterType(7, "maxSecondaryStat")
meterType.maxFuel = meterType(8, "maxFuel")
meterType.maxShield = meterType(9, "maxShield")
meterType.maxStructure = meterType(10, "maxStructure")
meterType.maxDefense = meterType(11, "maxDefense")
meterType.maxSupply = meterType(12, "maxSupply")
meterType.maxStockpile = meterType(13, "maxStockpile")
meterType.maxTroops = meterType(14, "maxTroops")
meterType.population = meterType(15, "population")
meterType.industry = meterType(16, "industry")
meterType.research = meterType(17, "research")
meterType.influence = meterType(18, "influence")
meterType.construction = meterType(19, "construction")
meterType.happiness = meterType(20, "happiness")
meterType.capacity = meterType(21, "capacity")
meterType.damage = meterType(21, "damage")
meterType.secondaryStat = meterType(22, "secondaryStat")
meterType.fuel = meterType(23, "fuel")
meterType.shield = meterType(24, "shield")
meterType.structure = meterType(25, "structure")
meterType.defense = meterType(26, "defense")
meterType.supply = meterType(27, "supply")
meterType.stockpile = meterType(28, "stockpile")
meterType.troops = meterType(29, "troops")
meterType.rebels = meterType(30, "rebels")
meterType.size = meterType(31, "size")
meterType.stealth = meterType(32, "stealth")
meterType.detection = meterType(33, "detection")
meterType.speed = meterType(34, "speed")


class planetEnvironment(Enum):
    def __init__(self, numerator, name):
        self.name = name

    uninhabitable = None  # planetEnvironment(0, "uninhabitable")
    hostile = None  # planetEnvironment(1, "hostile")
    poor = None  # planetEnvironment(2, "poor")
    adequate = None  # planetEnvironment(3, "adequate")
    good = None  # planetEnvironment(4, "good")


planetEnvironment.uninhabitable = planetEnvironment(0, "uninhabitable")
planetEnvironment.hostile = planetEnvironment(1, "hostile")
planetEnvironment.poor = planetEnvironment(2, "poor")
planetEnvironment.adequate = planetEnvironment(3, "adequate")
planetEnvironment.good = planetEnvironment(4, "good")


class planetSize(Enum):
    def __init__(self, numerator, name):
        self.name = name

    unknown = None  # planetSize(-1, "unknown")
    noWorld = None  # planetSize(0, "noWorld")
    tiny = None  # planetSize(1, "tiny")
    small = None  # planetSize(2, "small")
    medium = None  # planetSize(3, "medium")
    large = None  # planetSize(4, "large")
    huge = None  # planetSize(5, "huge")
    asteroids = None  # planetSize(6, "asteroids")
    gasGiant = None  # planetSize(7, "gasGiant")


planetSize.unknown = planetSize(-1, "unknown")
planetSize.noWorld = planetSize(0, "noWorld")
planetSize.tiny = planetSize(1, "tiny")
planetSize.small = planetSize(2, "small")
planetSize.medium = planetSize(3, "medium")
planetSize.large = planetSize(4, "large")
planetSize.huge = planetSize(5, "huge")
planetSize.asteroids = planetSize(6, "asteroids")
planetSize.gasGiant = planetSize(7, "gasGiant")


class planetType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    unknown = None  # planetType(-1, "unknown")
    swamp = None  # planetType(0, "swamp")
    toxic = None  # planetType(1, "toxic")
    inferno = None  # planetType(2, "inferno")
    radiated = None  # planetType(3, "radiated")
    barren = None  # planetType(4, "barren")
    tundra = None  # planetType(5, "tundra")
    desert = None  # planetType(6, "desert")
    terran = None  # planetType(7, "terran")
    ocean = None  # planetType(8, "ocean")
    asteroids = None  # planetType(9, "asteroids")
    gasGiant = None  # planetType(10, "gasGiant")


planetType.unknown = planetType(-1, "unknown")
planetType.swamp = planetType(0, "swamp")
planetType.toxic = planetType(1, "toxic")
planetType.inferno = planetType(2, "inferno")
planetType.radiated = planetType(3, "radiated")
planetType.barren = planetType(4, "barren")
planetType.tundra = planetType(5, "tundra")
planetType.desert = planetType(6, "desert")
planetType.terran = planetType(7, "terran")
planetType.ocean = planetType(8, "ocean")
planetType.asteroids = planetType(9, "asteroids")
planetType.gasGiant = planetType(10, "gasGiant")


class resourceType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    industry = None  # resourceType(0, "industry")
    influence = None  # resourceType(1, "influence")
    research = None  # resourceType(2, "research")
    stockpile = None  # resourceType(3, "stockpile")


resourceType.industry = resourceType(0, "industry")
resourceType.influence = resourceType(1, "influence")
resourceType.research = resourceType(2, "research")
resourceType.stockpile = resourceType(3, "stockpile")


class roleType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    host = None  # roleType(0, "host")
    clientTypeModerator = None  # roleType(1, "clientTypeModerator")
    clientTypePlayer = None  # roleType(2, "clientTypePlayer")
    clientTypeObserver = None  # roleType(3, "clientTypeObserver")
    galaxySetup = None  # roleType(4, "galaxySetup")


roleType.host = roleType(0, "host")
roleType.clientTypeModerator = roleType(1, "clientTypeModerator")
roleType.clientTypePlayer = roleType(2, "clientTypePlayer")
roleType.clientTypeObserver = roleType(3, "clientTypeObserver")
roleType.galaxySetup = roleType(4, "galaxySetup")


class ruleType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    invalid = None  # ruleType(-1, "invalid")
    toggle = None  # ruleType(0, "toggle")
    int = None  # ruleType(1, "int")
    double = None  # ruleType(2, "double")
    string = None  # ruleType(3, "string")


ruleType.invalid = ruleType(-1, "invalid")
ruleType.toggle = ruleType(0, "toggle")
ruleType.int = ruleType(1, "int")
ruleType.double = ruleType(2, "double")
ruleType.string = ruleType(3, "string")


class shipPartClass(Enum):
    def __init__(self, numerator, name):
        self.name = name

    shortRange = None  # shipPartClass(0, "shortRange")
    fighterBay = None  # shipPartClass(1, "fighterBay")
    fighterHangar = None  # shipPartClass(2, "fighterHangar")
    shields = None  # shipPartClass(3, "shields")
    armour = None  # shipPartClass(4, "armour")
    troops = None  # shipPartClass(5, "troops")
    detection = None  # shipPartClass(6, "detection")
    stealth = None  # shipPartClass(7, "stealth")
    fuel = None  # shipPartClass(8, "fuel")
    colony = None  # shipPartClass(9, "colony")
    speed = None  # shipPartClass(10, "speed")
    general = None  # shipPartClass(11, "general")
    bombard = None  # shipPartClass(12, "bombard")
    industry = None  # shipPartClass(13, "industry")
    research = None  # shipPartClass(14, "research")
    influence = None  # shipPartClass(15, "influence")
    productionLocation = None  # shipPartClass(16, "productionLocation")


shipPartClass.shortRange = shipPartClass(0, "shortRange")
shipPartClass.fighterBay = shipPartClass(1, "fighterBay")
shipPartClass.fighterHangar = shipPartClass(2, "fighterHangar")
shipPartClass.shields = shipPartClass(3, "shields")
shipPartClass.armour = shipPartClass(4, "armour")
shipPartClass.troops = shipPartClass(5, "troops")
shipPartClass.detection = shipPartClass(6, "detection")
shipPartClass.stealth = shipPartClass(7, "stealth")
shipPartClass.fuel = shipPartClass(8, "fuel")
shipPartClass.colony = shipPartClass(9, "colony")
shipPartClass.speed = shipPartClass(10, "speed")
shipPartClass.general = shipPartClass(11, "general")
shipPartClass.bombard = shipPartClass(12, "bombard")
shipPartClass.industry = shipPartClass(13, "industry")
shipPartClass.research = shipPartClass(14, "research")
shipPartClass.influence = shipPartClass(15, "influence")
shipPartClass.productionLocation = shipPartClass(16, "productionLocation")


class shipSlotType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    external = None  # shipSlotType(0, "external")
    internal = None  # shipSlotType(1, "internal")
    core = None  # shipSlotType(2, "core")


shipSlotType.external = shipSlotType(0, "external")
shipSlotType.internal = shipSlotType(1, "internal")
shipSlotType.core = shipSlotType(2, "core")


class starType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    unknown = None  # starType(-1, "unknown")
    blue = None  # starType(0, "blue")
    white = None  # starType(1, "white")
    yellow = None  # starType(2, "yellow")
    orange = None  # starType(3, "orange")
    red = None  # starType(4, "red")
    neutron = None  # starType(5, "neutron")
    blackHole = None  # starType(6, "blackHole")
    noStar = None  # starType(7, "noStar")


starType.unknown = starType(-1, "unknown")
starType.blue = starType(0, "blue")
starType.white = starType(1, "white")
starType.yellow = starType(2, "yellow")
starType.orange = starType(3, "orange")
starType.red = starType(4, "red")
starType.neutron = starType(5, "neutron")
starType.blackHole = starType(6, "blackHole")
starType.noStar = starType(7, "noStar")


class techStatus(Enum):
    def __init__(self, numerator, name):
        self.name = name

    unresearchable = None  # techStatus(0, "unresearchable")
    partiallyUnlocked = None  # techStatus(1, "partiallyUnlocked")
    researchable = None  # techStatus(2, "researchable")
    complete = None  # techStatus(3, "complete")


techStatus.unresearchable = techStatus(0, "unresearchable")
techStatus.partiallyUnlocked = techStatus(1, "partiallyUnlocked")
techStatus.researchable = techStatus(2, "researchable")
techStatus.complete = techStatus(3, "complete")


class unlockableItemType(Enum):
    def __init__(self, numerator, name):
        self.name = name

    invalid = None  # unlockableItemType(-1, "invalid")
    building = None  # unlockableItemType(0, "building")
    shipPart = None  # unlockableItemType(1, "shipPart")
    shipHull = None  # unlockableItemType(2, "shipHull")
    shipDesign = None  # unlockableItemType(3, "shipDesign")
    tech = None  # unlockableItemType(4, "tech")
    policy = None  # unlockableItemType(5, "policy")


unlockableItemType.invalid = unlockableItemType(-1, "invalid")
unlockableItemType.building = unlockableItemType(0, "building")
unlockableItemType.shipPart = unlockableItemType(1, "shipPart")
unlockableItemType.shipHull = unlockableItemType(2, "shipHull")
unlockableItemType.shipDesign = unlockableItemType(3, "shipDesign")
unlockableItemType.tech = unlockableItemType(4, "tech")
unlockableItemType.policy = unlockableItemType(5, "policy")


class visibility(Enum):
    def __init__(self, numerator, name):
        self.name = name

    invalid = None  # visibility(-1, "invalid")
    none = None  # visibility(0, "none")
    basic = None  # visibility(1, "basic")
    partial = None  # visibility(2, "partial")
    full = None  # visibility(3, "full")


visibility.invalid = visibility(-1, "invalid")
visibility.none = visibility(0, "none")
visibility.basic = visibility(1, "basic")
visibility.partial = visibility(2, "partial")
visibility.full = visibility(3, "full")


def add_special(number: int, string: str)  -> None:
    ...


def all_empires()  -> int:
    ...


def create_building(string: str, number1: int, number2: int)  -> int:
    ...


def create_field(string: str, floating_number1: float, floating_number2: float, floating_number3: float)  -> int:
    ...


def create_field_in_system(string: str, floating_number: float, number: int)  -> int:
    ...


def create_fleet(string: str, number1: int, number2: int, boolean: bool)  -> int:
    ...


def create_monster(string: str, number: int)  -> int:
    ...


def create_monster_fleet(number: int)  -> int:
    ...


def create_planet(planet_size: planetSize, planet_type: planetType, number1: int, number2: int, string: str)  -> int:
    ...


def create_ship(string1: str, string2: str, string3: str, number: int)  -> int:
    ...


def create_system(star_type: starType, string: str, floating_number1: float, floating_number2: float)  -> int:
    ...


def current_turn()  -> int:
    ...


def design_create(string1: str, string2: str, string3: str, item_list: list, string4: str, string5: str, boolean: bool)  -> bool:
    ...


def design_get_monster_list()  -> list:
    ...


def design_get_premade_list()  -> list:
    ...


def empire_add_ship_design(number: int, string: str)  -> None:
    ...


def empire_set_homeworld(number1: int, number2: int, string: str)  -> bool:
    ...


def empire_set_name(number: int, string: str)  -> None:
    ...


def empire_unlock_item(number: int, unlockable_item_type: unlockableItemType, string: str)  -> None:
    ...


def generate_sitrep(number: int, string1: str, dictionary: dict, string2: str)  -> None:
    ...


def generate_starlanes(number1: int, number2: int)  -> None:
    ...


def getBuildingType(string: str)  -> buildingType:
    """
    Returns the building type (BuildingType) with the indicated name (string).
    """


def getFieldType(string: str)  -> fieldType:
    ...


def getGameRules()  -> GameRules:
    """
    Returns the game rules manager, which can be used to look up the names (string) of rules are defined with what type (boolean / toggle, int, double, string), and what values the rules have in the current game.
    """


def getPolicy(string: str)  -> policy:
    """
    Returns the policy (Policy) with the indicated name (string).
    """


def getPolicyCategories(obj: object)  -> StringSet:
    """
    Returns the names of all policy categories (StringVec).
    """


def getPredefinedShipDesign(string: str)  -> shipDesign:
    """
    Returns the ship design (ShipDesign) with the indicated name (string).
    """


def getShipDesign(number: int)  -> shipDesign:
    """
    Returns the ship design (ShipDesign) with the indicated id number (int).
    """


def getShipHull(string: str)  -> shipHull:
    """
    Returns the ship hull with the indicated name (string).
    """


def getShipPart(string: str)  -> shipPart:
    """
    Returns the ShipPart with the indicated name (string).
    """


def getSpecial(string: str)  -> special:
    """
    Returns the special (Special) with the indicated name (string).
    """


def getSpecies(string: str)  -> species:
    """
    Returns the species (Species) with the indicated name (string).
    """


def getTech(string: str)  -> tech:
    """
    Returns the tech (Tech) with the indicated name (string).
    """


def getTechCategories(obj: object)  -> StringVec:
    """
    Returns the names of all tech categories (StringVec).
    """


def get_all_empires()  -> list:
    ...


def get_all_objects()  -> list:
    ...


def get_all_specials()  -> list:
    ...


def get_all_species()  -> list:
    ...


def get_empire(number: int)  -> empire:
    ...


def get_galaxy_setup_data()  -> GalaxySetupData:
    ...


def get_name(number: int)  -> object:
    ...


def get_native_species()  -> list:
    ...


def get_options_db_option_bool(string: str)  -> object:
    """
    Returns the bool value of option in OptionsDB or None if the option does not exist.
    """


def get_options_db_option_double(string: str)  -> object:
    """
    Returns the double value of option in OptionsDB or None if the option does not exist.
    """


def get_options_db_option_int(string: str)  -> object:
    """
    Returns the integer value of option in OptionsDB or None if the option does not exist.
    """


def get_options_db_option_str(string: str)  -> object:
    """
    Returns the string value of option in OptionsDB or None if the option does not exist.
    """


def get_owner(number: int)  -> int:
    ...


def get_playable_species()  -> list:
    ...


def get_pos(number: int)  -> tuple:
    ...


def get_resource_dir()  -> object:
    ...


def get_systems()  -> list:
    ...


def get_universe()  -> universe:
    ...


def get_universe_width()  -> float:
    ...


def get_user_config_dir()  -> str:
    """
    Returns path to directory where FreeOrion stores user specific configuration.
    """


def get_user_data_dir()  -> str:
    """
    Returns path to directory where FreeOrion stores user specific data (saves, etc.).
    """


def get_x(number: int)  -> float:
    ...


def get_y(number: int)  -> float:
    ...


def invalid_object()  -> int:
    ...


def invalid_position()  -> float:
    ...


def jump_distance(number1: int, number2: int)  -> int:
    ...


def large_meter_value()  -> float:
    ...


def linear_distance(number1: int, number2: int)  -> float:
    ...


def load_fleet_plan_list()  -> list:
    ...


def load_monster_fleet_plan_list()  -> list:
    ...


def load_starting_buildings()  -> list:
    ...


def load_unlockable_item_list()  -> list:
    ...


def objs_get_systems(item_list: list)  -> list:
    ...


def planet_available_foci(number: int)  -> list:
    ...


def planet_cardinal_suffix(number: int)  -> object:
    ...


def planet_get_focus(number: int)  -> object:
    ...


def planet_get_size(number: int)  -> planetSize:
    ...


def planet_get_species(number: int)  -> object:
    ...


def planet_get_type(number: int)  -> planetType:
    ...


def planet_make_colony(number1: int, number2: int, string: str, floating_number: float)  -> bool:
    ...


def planet_make_outpost(number1: int, number2: int)  -> bool:
    ...


def planet_set_focus(number: int, string: str)  -> None:
    ...


def planet_set_size(number: int, planet_size: planetSize)  -> None:
    ...


def planet_set_species(number: int, string: str)  -> None:
    ...


def planet_set_type(number: int, planet_type: planetType)  -> None:
    ...


def policies()  -> StringVec:
    """
    Returns the names of all policies (StringVec).
    """


def policiesInCategory(string: str)  -> StringVec:
    """
    Returns the names of all policies (StringVec) in the indicated policy category name (string).
    """


def remove_special(number: int, string: str)  -> None:
    ...


def roman_number(number: int)  -> str:
    ...


def set_name(number: int, string: str)  -> None:
    ...


def set_universe_width(floating_number: float)  -> None:
    ...


def special_has_location(string: str)  -> bool:
    ...


def special_locations(string: str, item_list: list)  -> list:
    ...


def special_spawn_limit(string: str)  -> int:
    ...


def special_spawn_rate(string: str)  -> float:
    ...


def species_add_homeworld(string: str, number: int)  -> None:
    ...


def species_can_colonize(string: str)  -> bool:
    ...


def species_get_planet_environment(string: str, planet_type: planetType)  -> planetEnvironment:
    ...


def species_preferred_focus(string: str)  -> object:
    ...


def species_remove_homeworld(string: str, number: int)  -> None:
    ...


def sys_add_starlane(number1: int, number2: int)  -> None:
    ...


def sys_free_orbits(number: int)  -> list:
    ...


def sys_get_fleets(number: int)  -> list:
    ...


def sys_get_num_orbits(number: int)  -> int:
    ...


def sys_get_planets(number: int)  -> list:
    ...


def sys_get_star_type(number: int)  -> starType:
    ...


def sys_get_starlanes(number: int)  -> list:
    ...


def sys_orbit_occupied(number1: int, number2: int)  -> bool:
    ...


def sys_orbit_of_planet(number1: int, number2: int)  -> int:
    ...


def sys_remove_starlane(number1: int, number2: int)  -> None:
    ...


def sys_set_star_type(number: int, star_type: starType)  -> None:
    ...


def systems_within_jumps_unordered(number: int, item_list: list)  -> list:
    """
    Return all systems within ''jumps'' of the systems with ids ''sys_ids''
    """


def techs()  -> StringVec:
    """
    Returns the names of all techs (StringVec).
    """


def techsInCategory(string: str)  -> StringVec:
    """
    Returns the names of all techs (StringVec) in the indicated tech category name (string).
    """


def user_string(string: str)  -> str:
    ...


def validShipDesign(ship_design: shipDesign, string: str, string_list: StringVec)  -> bool:
    """
    Returns true (boolean) if the passed hull (string) and parts (StringVec) make up a valid ship design, and false (boolean) otherwise. Valid ship designs don't have any parts in slots that can't accept that type of part, and contain only hulls and parts that exist (and may also need to contain the correct number of parts - this needs to be verified).
    """
