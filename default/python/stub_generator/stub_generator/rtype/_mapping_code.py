mapping_code = """
KT = TypeVar("KT")
VT = TypeVar("VT")

class Set(Generic[VT]):
    def __contains__(self, number: VT) -> bool: ...
    def __iter__(self) -> Iterator[VT]: ...
    def __len__(self) -> int: ...

class Vec(Generic[VT]):
    def __contains__(self, val: VT) -> bool: ...
    def __delitem__(self, val: VT) -> None: ...
    def __getitem__(self, ind: int) -> KT: ...
    def __iter__(self) -> Iterator[VT]: ...
    def __len__(self) -> int: ...
    def __setitem__(self, ind: int, val: VT) -> None: ...
    def append(self, val: VT) -> None: ...
    def extend(self, iterable: Iterable[VT]) -> None: ...

class Item(Generic[KT, VT]):
    def key(self) -> KT: ...
    def data(self) -> VT: ...

class Map(Generic[KT, VT]):
    def __contains__(self, key: KT) -> bool: ...
    def __delitem__(self, key: KT) -> None: ...
    def __getitem__(self, key: KT) -> VT: ...
    def __iter__(self) -> Iterator[Item[KT, VT]]: ...
    def __len__(self) -> int: ...
    def __setitem__(self, key: KT, value: VT) -> None: ..."""
