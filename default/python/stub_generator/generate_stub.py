from typing import List, Set

from stub_generator.interface_inspector import ClassInfo, EnumInfo, FunctionInfo, InstanceInfo
from stub_generator.stub_generator import EnumProcessor
from stub_generator.stub_generator.class_processor import ClassProcessor
from stub_generator.stub_generator.function_processor import FunctionProcessor


def make_stub(classes: List[ClassInfo], enums: List[EnumInfo], functions: List[FunctionInfo],
              instances: List[InstanceInfo], result_path, classes_to_ignore: Set[str]):

    enum_processor = EnumProcessor(enums)
    enum_processor.process()

    function_processor = FunctionProcessor(functions)
    function_processor.process()

    class_processor = ClassProcessor(classes, instances, classes_to_ignore)
    class_processor.process()




    res = [
        '# Autogenerated do not modify manually!\n'
        '# This is a type-hinting python stub file, used by python IDEs to provide type hints. For more information\n'
        '# about stub files, see https://www.python.org/dev/peps/pep-0484/#stub-files\n'
        '# During execution, the actual module is made available via\n'
        '# a C++ Boost-python process as part of the launch.\n'
        'from typing import Dict'
    ]

    res.extend(enum_processor.imports)
    res.extend(function_processor.imports)
    res.extend(class_processor.imports)



    res.append(enum_processor.before)
    res.append(enum_processor.body)


    res.extend(function_processor.before)
    res.extend(function_processor.body)

    with open(result_path, 'w') as f:
        f.write('\n\n\n'.join(res))
        f.write('\n')
