/**
@page content_tags_alias content tags alias

Usage:
@verbatim @content_tag{TAG_NAME} brief description @endverbatim

This custom command provides a common interface to document content definition
tags.

@section alias_content_tags_example Examples

Definition tags should be documented only once, at the first point of use within
source files or scripts.
Documentation within FOCS markup files is not yet
supported.

Some example code fragments:
@verbatim // File: Sample1.h
/** @content_tag{CTRL_SAMPLE1} Sample 1 **/
int SomeFunction(std::string tag = "CTRL_SAMPLE1");
@endverbatim

With Python, docstring comments do not support special commands.

@verbatim # File: Sample3.py
def AnotherFunc(some_object):
    ## @content_tag{CTRL_SAMPLE3} Sample 3
    if universe.getObject(some_object).hasTag("CTRL_SAMPLE3"):
        do_work
@endverbatim

@subsection alias_content_tags_duplicate_entries Duplicate entries

Within any single scope, after the first use of this alias, any additional
uses will show a duplicated entry.\n
To work around this bug, define those tags in variables and reference them
where needed.

@verbatim # File: Sample4.cpp
void FuncThree(Object obj) {
    /** @content_tag{CTRL_SAMPLE4a} Sample 4a **/
    if (obj.HasTag("CTRL_SAMPLE4a"))
        DoHardWork();
    /** @content_tag{CTRL_SAMPLE4b} Sample 4b **/
    else if (obj.HasTag("CTRL_SAMPLE4b"))
        DoLessWork();
}
@endverbatim
Results in duplicate entries for CTRL_SAMPLE4b.

@verbatim # File: Sample4.cpp
/** @content_tag{CTRL_SAMPLE4a} Sample 4a **/
const std::string TAG_SAMPLE_4A = "CTRL_SAMPLE4a";
/** @content_tag{CTRL_SAMPLE4b} Sample 4b **/
const std::string TAG_SAMPLE_4B = "CTRL_SAMPLE4b";
void FuncThree(Object obj) {
    if (obj.HasTag(TAG_SAMPLE_4A))
        DoHardWork();
    else if (obj.HasTag(TAG_SAMPLE_4B))
        DoLessWork();
}
@endverbatim
Prevents duplication.

**/
